{Implementar un programa que invoque a los siguientes módulos.

a. Implementar un módulo recursivo que permita leer una secuencia de caracteres terminada en punto y los almacene en un vector con dimensión física igual a 10.
b. Implementar un módulo que imprima el contenido del vector.
c. Implementar un módulo recursivo que imprima el contenido del vector.
d. Implementar un módulo recursivo que permita leer una secuencia de caracteres terminada en punto y retorne la cantidad de caracteres leidos. 
El programa debe informar el valor retornado.
e. Implementar un módulo recursivo que permita leer una secuencia de caracteres terminada en punto y retorne una lista con los caracteres leidos.
f. Implemente un módulo recursivo que reciba la lista generada en d. e imprima los valores de la lista en el mismo orden que están almacenados.
g. Implemente un módulo recursivo que reciba la lista generada en d. e imprima los valores de la lista en orden inverso al que están almacenados.
}

Program Clase2MI;
const dimF = 5;
type vector = array [1..dimF] of char;
     lista = ^nodo;
     nodo = record
              dato: char;
              sig: lista;
            end;


procedure CargarVector (var v: vector; var dimL: integer);

  procedure CargarVectorRecursivo (var v: vector; var dimL: integer);
  var caracter: char;
  begin
    write ('Ingrese un caracter: ');
    readln(caracter);  
    if (caracter <> '.' ) and (dimL < dimF) 
    then begin
          dimL:= dimL + 1;
          v[dimL]:= caracter;
          CargarVectorRecursivo (v, dimL);
         end;
  end;
  
begin
  dimL:= 0;
  CargarVectorRecursivo (v, dimL); {invoca al procedimiento anterior}
end;
 
procedure ImprimirVector (v: vector; dimL: integer);
var
   i: integer;
begin
     for i:= 1 to dimL do
         write ('----');			{----;----;----;----;... hasta la dimL}
     writeln;						{}	
	write (' ');					{ }
     for i:= 1 to dimL do begin		{ a | s |...}
        write(v[i], ' | ');
     end;
     writeln;
     for i:= 1 to dimL do
         write ('----');			{----;----;----;... hasta la dimL}
     writeln;
     writeln;
End; 

procedure ImprimirVectorRecursivo (v: vector; dimL: integer);
begin
	if (dimL<>0) then begin 							{el caso base es el vector con un solo elemento para imprimir}
		writeln ('el valor en posicion ', dimL,' es ', v[dimL]);
		imprimirVectorRecursivo (v, dimL-1);
		end;
end;   

function ContarCaracteres(): integer;		{primera vez que veo que no le pasen parametros a una funcion, en este caso devuelve un entero}
var caracter: char;							{no inicializa nunca a ContarCaracteres, ni acá ni en el programa principal a la variable cont}
Begin										{tiene que ser por como invoco a la funcion, o sea, parece que se esta creando en el momento}
  write ('Ingrese un caracter: ');			{funciona como un while sin ponerlo ya que invoco a ContarCaracteres dentro mismo}
  readln(caracter);  
  if (caracter <> '.' )  
  then ContarCaracteres:= ContarCaracteres() + 1  
  else ContarCaracteres:=0  
End;
  

procedure CargarLista (var l: lista);
var caracter: char;
    nuevo: lista;
Begin
  write ('Ingrese un caracter: ');
  readln(caracter);  
  if (caracter <> '.' )  
  then begin
         CargarLista (l);			{Es un agregar adelante, luego cuando lea la lista la tiene al reves}
         new (nuevo);				{NO NO NO ES CORRECTO, dejo comentario para ver que estaba equivocado}
         nuevo^.dato:= caracter;	{Como siempre lee caracter antes de entrar al CargarLista, siempre estara con el ultimo valor}
         nuevo^.sig:= l;			
         l:= nuevo;
       end
  else l:= nil
End;

procedure ImprimirListaMismoOrden (l: lista);
begin
  if (l<> nil) then begin
                      write (' ', l^.dato);
                      ImprimirListaMismoOrden (l^.sig);
                    end;
end;

procedure ImprimirListaOrdenInverso (l: lista);
begin
  if (l<> nil) then begin
						ImprimirListaOrdenInverso (l^.sig);
						write (' ', l^.dato);             
                    end;
end;

var cont, dimL: integer; l: lista; v: vector;
Begin 
  CargarVector (v, dimL);
  writeln;
  if (dimL = 0) then writeln ('--- Vector sin elementos ---')
                else begin
                       ImprimirVector (v, dimL); {no recursivo}
                       ImprimirVectorRecursivo (v, dimL); {recursivo}
                     end;
  writeln;
  writeln;                   
  cont:= ContarCaracteres();
  writeln;
  writeln;
  writeln('Se ingresaron ',cont,' caracteres'); 
  writeln;
  writeln;
  CargarLista (l);
  writeln;
  writeln;
  if (l = nil) then writeln ('--- Lista sin elementos ---')
               else Begin
                      writeln ('--- Orden ingresado ---');
                      writeln;
                      ImprimirListaMismoOrden (l);
                      writeln;
                      writeln;
                      writeln ('--- Orden inverso ---');
                      writeln;
                      ImprimirListaOrdenInverso (l);
                    end;
end.
